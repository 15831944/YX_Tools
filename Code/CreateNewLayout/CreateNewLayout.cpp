//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  D:\YX_Tools\Code\layout\CreateNewLayout.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: Yang
//              Version: NX 11
//              Date: 04-25-2017  (Format: mm-dd-yyyy)
//              Time: 16:37 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "CreateNewLayout.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(CreateNewLayout::theSession) = NULL;
UI *(CreateNewLayout::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
CreateNewLayout::CreateNewLayout()
{
    try
    {
        // Initialize the NX Open C++ API environment
        CreateNewLayout::theSession = NXOpen::Session::GetSession();
        CreateNewLayout::theUI = UI::GetUI();
        theDlxFileName = "CreateNewLayout.dlx";
        theDialog = CreateNewLayout::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &CreateNewLayout::apply_cb));
        theDialog->AddUpdateHandler(make_callback(this, &CreateNewLayout::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &CreateNewLayout::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &CreateNewLayout::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
CreateNewLayout::~CreateNewLayout()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    CreateNewLayout *theCreateNewLayout = NULL;
    try
    {
        theCreateNewLayout = new CreateNewLayout();
        // The following method shows the dialog immediately
        theCreateNewLayout->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CreateNewLayout::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(theCreateNewLayout != NULL)
    {
        delete theCreateNewLayout;
        theCreateNewLayout = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CreateNewLayout::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int CreateNewLayout::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CreateNewLayout::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void CreateNewLayout::initialize_cb()
{
    try
    {
        string0 = dynamic_cast<NXOpen::BlockStyler::StringBlock*>(theDialog->TopBlock()->FindBlock("string0"));
        group = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group"));
        enum0 = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enum0"));
        list_box0 = dynamic_cast<NXOpen::BlockStyler::ListBox*>(theDialog->TopBlock()->FindBlock("list_box0"));
        enum1 = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enum1"));
        double0 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double0"));
        group1 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group1"));
        toggle0 = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle0"));
        toggle01 = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle01"));
        toggle02 = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle02"));
        //------------------------------------------------------------------------------
        //Registration of ListBox specific callbacks
		
        //------------------------------------------------------------------------------
        //list_box0->SetAddHandler(make_callback(this, &CreateNewLayout::AddCallback));
        
        //list_box0->SetDeleteHandler(make_callback(this, &CreateNewLayout::DeleteCallback));
        
        //------------------------------------------------------------------------------
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CreateNewLayout::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void CreateNewLayout::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
		/*string0->SetValue("你好吗");*/
		SetLayoutName();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CreateNewLayout::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int CreateNewLayout::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
		
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        CreateNewLayout::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int CreateNewLayout::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == string0)
        {
        //---------Enter your code here-----------
        }
        else if(block == enum0)
        {
        //---------Enter your code here-----------
        }
        else if(block == list_box0)
        {
        //---------Enter your code here-----------
        }
        else if(block == enum1)
        {
        //---------Enter your code here-----------
        }
        else if(block == double0)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle0)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle01)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle02)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CreateNewLayout::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}
//------------------------------------------------------------------------------
//ListBox specific callbacks
//------------------------------------------------------------------------------
//int CreateNewLayout::AddCallback (NXOpen::BlockStyler::ListBox* list_box)
//{
//}

//int CreateNewLayout::DeleteCallback(NXOpen::BlockStyler::ListBox* list_box)
//{
//}

//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* CreateNewLayout::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}

void CreateNewLayout::SetLayoutName()
{
	UF_initialize();

// 	[Layout]
// 	Prefix=Layout
//===============读INI配置文件==================================
	INIParser ini_parser;
	ini_parser.ReadINI("D:\\YX_Tools\\Configure\\config.ini");//INI文件路径
	string Prefix=ini_parser.GetValue("Layout", "Prefix");//文件名前缀
	ini_parser.Clear();
	ini_parser.GetSize() ;
	Prefix=Prefix+"_";
	UF_UI_open_listing_window();
	UF_UI_write_listing_window(Prefix.c_str());
	UF_UI_write_listing_window("\n");
// ===============遍历所有布局名称==============================
	std::vector<int> Number;
	char ca1[UF_OBJ_NAME_BUFSIZE]="";
	uc6471(ca1);
	while (strcmp(ca1," "))
	{
		string s1=ca1;
		string s2=s1.substr(0,Prefix.size());
				if (!strcmp(s2.c_str(),Prefix.c_str()))
				{
					string shuzi=s1.substr(s1.find("_")+1,s1.size()-Prefix.size());
					UF_UI_write_listing_window(shuzi.c_str());
					UF_UI_write_listing_window("\n");
					UF_UI_write_listing_window("没有咯");
					UF_UI_write_listing_window("\n");
					Number.push_back(atoi(shuzi.c_str()));
				}
				uc6471(ca1);
	}
// 	//取布局名称结尾最大一个数字
// 		int tmp1=0 ;
// 		for (int i=0;i<Number.size();i++)
// 		{
// 			if (tmp1<Number[i])
// 			{
// 				tmp1=Number[i];
// 			}
// 		}
// 		tmp1++;
// 		char LayoutName[256];
// 		sprintf(LayoutName,Prefix.c_str()+tmp1);
// 
// 		string0->SetValue("你好吗");
// 
// 
// 		//===============输出测试==================================
// 		//				UF_initialize();
// 				UF_UI_open_listing_window();
// 				UF_UI_write_listing_window(Prefix.c_str());
// 				UF_UI_write_listing_window("\n");
// 				UF_UI_write_listing_window(LayoutName);	
// 				UF_UI_write_listing_window("\n");
		UF_terminate();
}
