//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  D:\YX_Tools\Application\SymBlock.hpp
//
//        This file was generated by the NX Block Styler
//        Created by: Yang
//              Version: NX 11
//              Date: 09-02-2016  (Format: mm-dd-yyyy)
//              Time: 23:37
//
//==============================================================================

#ifndef SYMBLOCK_H_INCLUDED
#define SYMBLOCK_H_INCLUDED

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include <uf_defs.h>
#include <uf_ui_types.h>
#include <iostream>
#include <NXOpen/Session.hxx>
#include <NXOpen/UI.hxx>
#include <NXOpen/NXMessageBox.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXException.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_BlockDialog.hxx>
#include <NXOpen/BlockStyler_PropertyList.hxx>
#include <NXOpen/BlockStyler_Group.hxx>
#include <NXOpen/BlockStyler_Enumeration.hxx>
#include <NXOpen/BlockStyler_SpecifyPoint.hxx>
#include <NXOpen/BlockStyler_LinearDimension.hxx>
#include <NXOpen/BlockStyler_Separator.hxx>
#include <NXOpen/BlockStyler_BodyCollector.hxx>
#include <NXOpen/BlockStyler_Button.hxx>


//用户自定义头文件
#include <uf.h>
#include <uf_ui.h>
#include <uf_modl.h>
#include < uf_modl_primitives.h>

//------------------------------------------------------------------------------
// Namespaces needed for following template
//------------------------------------------------------------------------------
using namespace std;
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

class DllExport SymBlock
{
    // class members
public:
    static Session *theSession;
    static UI *theUI;
    SymBlock();
    ~SymBlock();
    int Show();
    
    //----------------------- BlockStyler Callback Prototypes ---------------------
    // The following member function prototypes define the callbacks 
    // specified in your BlockStyler dialog.  The empty implementation
    // of these prototypes is provided in the SymBlock.cpp file. 
    // You are REQUIRED to write the implementation for these functions.
    //------------------------------------------------------------------------------
    void initialize_cb();
    void dialogShown_cb();
    int apply_cb();
    int ok_cb();
    int update_cb(NXOpen::BlockStyler::UIBlock* block);
    PropertyList* GetBlockProperties(const char *blockID);
    
private:
    const char* theDlxFileName;
    NXOpen::BlockStyler::BlockDialog* theDialog;
    NXOpen::BlockStyler::Group* grouptype;// Block type: Group
    NXOpen::BlockStyler::Enumeration* blocktype;// Block type: Enumeration
    NXOpen::BlockStyler::Group* groupselectpoint;// Block type: Group
    NXOpen::BlockStyler::SpecifyPoint* selectcenterpoint;// Block type: Specify Point
    NXOpen::BlockStyler::Group* groupdim;// Block type: Group
    NXOpen::BlockStyler::LinearDimension* dimxc;// Block type: Linear Dim
    NXOpen::BlockStyler::LinearDimension* dimyc;// Block type: Linear Dim
    NXOpen::BlockStyler::LinearDimension* dimzc;// Block type: Linear Dim
    NXOpen::BlockStyler::Group* groupbool;// Block type: Group
    NXOpen::BlockStyler::Enumeration* booltype;// Block type: Enumeration
    NXOpen::BlockStyler::Separator* separator0;// Block type: Separator
    NXOpen::BlockStyler::BodyCollector* boolbodySelect;// Block type: Body Collector
    NXOpen::BlockStyler::Group* group4;// Block type: Group
    NXOpen::BlockStyler::Button* preview;// Block type: Button
    
	//用户全局变量
	bool previewkey;
	double mainpoint[3];

	tag_t createblockTAG;
	tag_t theoverTAG;
	tag_t booltargetTAG, booltoolTAG,booloverTAG;
	std::vector<NXOpen::TaggedObject *> boolbodys;


	//用户函数
	void selectbooltype();
	void Initializationpreview();
	void previestate(bool previekey);
/*	void chooseblocktype();*/
	void createblock();


};
#endif //SYMBLOCK_H_INCLUDED
