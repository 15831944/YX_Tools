//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  D:\YX_Tools\Application\simple_cylinder.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: Yang
//              Version: NX 11
//              Date: 09-01-2016  (Format: mm-dd-yyyy)
//              Time: 20:44 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "simple_cylinder.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(simple_cylinder::theSession) = NULL;
UI *(simple_cylinder::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
simple_cylinder::simple_cylinder()
{
    try
    {
        // Initialize the NX Open C++ API environment
        simple_cylinder::theSession = NXOpen::Session::GetSession();
        simple_cylinder::theUI = UI::GetUI();
        theDlxFileName = "simple_cylinder.dlx";
        theDialog = simple_cylinder::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &simple_cylinder::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &simple_cylinder::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &simple_cylinder::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &simple_cylinder::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &simple_cylinder::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
simple_cylinder::~simple_cylinder()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    simple_cylinder *thesimple_cylinder = NULL;
    try
    {
        thesimple_cylinder = new simple_cylinder();
        // The following method shows the dialog immediately
        thesimple_cylinder->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        simple_cylinder::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(thesimple_cylinder != NULL)
    {
        delete thesimple_cylinder;
        thesimple_cylinder = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        simple_cylinder::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int simple_cylinder::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        simple_cylinder::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void simple_cylinder::initialize_cb()
{
    try
    {
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        selectpoint = dynamic_cast<NXOpen::BlockStyler::SpecifyPoint*>(theDialog->TopBlock()->FindBlock("selectpoint"));
        selectvector = dynamic_cast<NXOpen::BlockStyler::SpecifyVector*>(theDialog->TopBlock()->FindBlock("selectvector"));
        group1 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group1"));
        CYdiameter = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("CYdiameter"));
        CYlength = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("CYlength"));
        startball = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("startball"));
        endball = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("endball"));
        group2 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group2"));
        booltype = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("booltype"));
        boolbodySelect = dynamic_cast<NXOpen::BlockStyler::BodyCollector*>(theDialog->TopBlock()->FindBlock("boolbodySelect"));
        group3 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group3"));
        previewresult = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("previewresult"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        simple_cylinder::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void simple_cylinder::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----

		previewresult->SetLabel("预览 ");
		group2->SetShow(0);
		previekey=1;
		selectbooltype();
		Showpreviebutton();



    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        simple_cylinder::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int simple_cylinder::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----


		if (previekey)
		{
			createcylinder();
		} 
		else
		{
		}


    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        simple_cylinder::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int simple_cylinder::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == selectpoint)
        {
        //---------Enter your code here-----------
					Showpreviebutton();
        }
        else if(block == selectvector)
        {
        //---------Enter your code here-----------
					Showpreviebutton();
        }
        else if(block == CYdiameter)
        {
        //---------Enter your code here-----------
        }
        else if(block == CYlength)
        {
        //---------Enter your code here-----------
        }
        else if(block == startball)
        {
        //---------Enter your code here-----------
        }
        else if(block == endball)
        {
        //---------Enter your code here-----------
        }
        else if(block == booltype)
        {
        //---------Enter your code here-----------


			//用户定义代码,判断布尔运算选项是否启用
				selectbooltype();
        }
        else if(block == boolbodySelect)
        {
        //---------Enter your code here-----------
        }
        else if(block == previewresult)
        {
        //---------Enter your code here-----------
		/**/

			if (previekey==1)
			{
				previestate(0);
				createcylinder();
				previewresult->SetBitmap("undo");
				previewresult->SetLabel("撤销 ");
			} 
			else
			{
				previestate(1);
				previewresult->SetBitmap("magnifying_glass");
				previewresult->SetLabel("预览 ");
/*				tag_t bodyTAG=creatbodyTAG[1]->Tag();*/
				uf_list_t  *listtag=NULL;
				UF_MODL_create_list(&listtag);
				//	cylinderTAG,startballTAG,endballTAG,TAG4,newbodyTAG;
// 				UF_MODL_put_list_item(listtag,cylinderTAG);
// 				UF_MODL_put_list_item(listtag,startballTAG);
//					UF_MODL_put_list_item(listtag,newbodyTAG);
// 				UF_MODL_put_list_item(listtag,endballTAG);
// 				UF_MODL_put_list_item(listtag,TAG4);

				if (startball->Value()==0 && endball->Value()==0)
				{
					UF_MODL_put_list_item(listtag,cylinderTAG);
				}else if(startball->Value()==1)
				{			
					if (endball->Value()==1)
					{
						UF_MODL_put_list_item(listtag,cylinderTAG);
						UF_MODL_put_list_item(listtag,startballTAG);
						UF_MODL_put_list_item(listtag,newbodyTAG);
						UF_MODL_put_list_item(listtag,endballTAG);
						UF_MODL_put_list_item(listtag,TAG4);
						}	else
						UF_MODL_put_list_item(listtag,cylinderTAG);
						UF_MODL_put_list_item(listtag,startballTAG);
						UF_MODL_put_list_item(listtag,newbodyTAG);
						{
					}
				}else if(endball->Value()==1)
				{
					UF_MODL_put_list_item(listtag,cylinderTAG);
					UF_MODL_put_list_item(listtag,endballTAG);
					UF_MODL_put_list_item(listtag,TAG4);
					}

				//creatbodyTAG,cylinderTAG,startballTAG,endballTAG;
				UF_MODL_delete_feature(listtag);
				UF_MODL_delete_list(&listtag);
			}
			previekey=!previekey;
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        simple_cylinder::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int simple_cylinder::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        simple_cylinder::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* simple_cylinder::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}


void simple_cylinder::createcylinder()
{
	UF_initialize();

	tag_t tmp_TAG2=NULL_TAG,tmp_TAG3=NULL_TAG;

	Point3d cypoint=selectpoint->Point();//获取选择的点
	double tmp_cydiam=CYdiameter->Value();//获取输入的直径
	double tmp_cyheight=CYlength->Value();//获取输入的直径
	Vector3d direction=selectvector->Vector();//获取向量方向

	//数据转换
	char tmp_height[256],tmp_diam[256];
	sprintf(tmp_height,"%f",tmp_cyheight);
	sprintf(tmp_diam,"%f",tmp_cydiam);

	//创建圆柱
	UF_FEATURE_SIGN cysign=UF_NULLSIGN;
	double startorigin [ 3 ] ={cypoint.X,cypoint.Y,cypoint.Z};
	char *cyheight=tmp_height;
	char * cydiam=tmp_diam;
	double cydirection [ 3 ]={direction.X,direction.Y,direction.Z};
	cylinderTAG=NULL_TAG;
	UF_MODL_create_cyl1( cysign, startorigin, cyheight, cydiam, cydirection , &cylinderTAG);
	
	tag_t  	cybodyTAG=NULL_TAG;
	startballTAG=NULL_TAG;
	UF_MODL_ask_feat_body(cylinderTAG, & cybodyTAG );//转换圆柱特征TAG到实体TAG
				


	//起始端被选中

	if (startball->Value()==1)
	{
			UF_FEATURE_SIGN startballsign=UF_NULLSIGN;		
			UF_MODL_create_sphere(startballsign,cylinderTAG,startorigin,cydiam,&startballTAG);//创建起始端球
			
			tag_t tmp_TAG1=NULL_TAG;
			UF_MODL_ask_feat_body(startballTAG, & tmp_TAG1 );//转换第一个球的特征TAG到实体TAG
			newbodyTAG =NULL_TAG;
			UF_MODL_unite_bodies_with_retained_options(cybodyTAG,tmp_TAG1,FALSE,FALSE,&newbodyTAG);//求和

			
	} 
	//终止端被选中

	if(endball->Value()==1)
	{


				double endpointX,endpointY,endpointZ;
				endpointX=cypoint.X+direction.X*tmp_cyheight;
				endpointY=cypoint.Y+direction.Y*tmp_cyheight;
				endpointZ=cypoint.Z+direction.Z*tmp_cyheight;
				double endpoint[3]={endpointX,endpointY,endpointZ};//获取圆柱末断点的坐标

				UF_FEATURE_SIGN endballsign=UF_NULLSIGN;		
				endballTAG=NULL_TAG;
				UF_MODL_create_sphere(endballsign,cylinderTAG,endpoint,cydiam,&endballTAG);//创建第二个球
		

				if (startball->Value()==0)//未勾选则直接输出圆柱tag
				{
						tmp_TAG2=cybodyTAG;
				}
				else if (startball->Value()==1)//,勾选则输出求和之后tag,
				{
					UF_MODL_ask_feat_body(newbodyTAG, & tmp_TAG2 );	 
				}
				

				TAG4=NULL_TAG;
			UF_MODL_ask_feat_body(endballTAG, & tmp_TAG3 );//转换第二个球的特征TAG到实体TAG
			UF_MODL_unite_bodies_with_retained_options(tmp_TAG3,tmp_TAG2,FALSE,FALSE,&TAG4);//求和
		}
// 		creatbodyTAG=NULL_TAG;
// 			if (startball==0 && endball->Value()==0)
// 			{
// 				creatbodyTAG=cybodyTAG;
// 			}else if(startball->Value()==1)
// 			{			
// 						if (endball->Value()==1)
// 						{
// 							creatbodyTAG=TAG4;
// 						}	else
// 						{
// 							creatbodyTAG=newbodyTAG;
// 						}
// 			}else if(endball->Value()==1)
// 			{
// 				creatbodyTAG=TAG4;
// 			}


	UF_terminate();
}


	void simple_cylinder:: previestate(bool previekey)
	{
		group0->SetEnable(previekey);
		group1->SetEnable(previekey);
		group2->SetEnable(previekey);
	}
	void simple_cylinder:: selectbooltype()
	{
		//用户定义代码,判断布尔运算选项是否启用
		if (booltype->GetProperties()->GetEnum("Value")==0)
		{
			boolbodySelect->SetEnable(0);
			boolbodySelect->SetShow(0);

		} 
		else
		{
			boolbodySelect->SetEnable(1);
			boolbodySelect->SetShow(1);
		}
	}

	void simple_cylinder::Showpreviebutton()
	{
		std::vector<TaggedObject *>prevpoint=selectpoint->GetSelectedObjects();
		std::vector<TaggedObject *>prevvector=selectvector->GetSelectedObjects();

		if (int(prevpoint.size())==0 || int(prevvector.size())==0)
		{
			previewresult->SetEnable(0);
		} 
		else if (int(prevpoint.size())>0 && int(prevvector.size())>0)
		{
			previewresult->SetEnable(1);
		}
	}
